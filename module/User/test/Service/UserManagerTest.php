<?php
namespace User\Service;

use User\Entity\User;
use Zend\Test\PHPUnit\Controller\AbstractHttpControllerTestCase;
use Zend\Stdlib\ArrayUtils;

class UserManagerTest extends AbstractHttpControllerTestCase
{

    protected $serviceManager;


    protected function getORM()
    {
        $orm = $this->serviceManager->get('doctrine.entitymanager.orm_default');
        return $orm;
    }


    protected function setUp()
    {

        // The module configuration should still be applicable for tests.
        // You can override configuration here with test case specific values,
        // such as sample view templates, path stacks, module_listener_options,
        // etc.
        $configOverrides = [];

        $this->setApplicationConfig(ArrayUtils::merge(
            include __DIR__ . '/../../../../config/application.config.php',
            $configOverrides
        ));

        parent::setUp();

        //$this->userService = new UserService();
        $this->serviceManager = $this->getApplicationServiceLocator();

    }


    protected function tearDown()
    {
        $orm = $this->getORM();
        $qb = $orm->createQueryBuilder();
        $exp = $qb->expr();
        $qb->select('u');
        $qb->from(User::class,'u');
        $qb->andWhere($exp->like('u.email', ':email'));
        $qb->setParameter('email','%test%');
        $iterateResult = $qb->getQuery();
        $res = $iterateResult->iterate();
        foreach ($res as $usAsArr){
            $orm->remove($usAsArr[0]);
        }
        $orm->flush();
        $orm->clear();


        parent::tearDown(); // TODO: Change the autogenerated stub
    }



    public function test__construct()
    {
        $userManager = $this->serviceManager->get(UserManager::class);
        $this->assertInstanceOf(UserManager::class,$userManager);
    }

    public function testAddUser()
    {
        $data = [
            'email' => 'test@mail.lt',
            'full_name' => 'Test User',
            'password' => '123456'
        ];

        $userManager = $this->serviceManager->get(UserManager::class);
        $user = $userManager->addUser($data);
        $this->assertInstanceOf(User::class, $user);
    }


    public function testExceptionAddUser()
    {
        $data = [
            'email' => 'test@mail.lt',
            'full_name' => 'Test User',
            'password' => '123456'
        ];

        $userManager = $this->serviceManager->get(UserManager::class);
        $user = $userManager->addUser($data);
        $this->assertInstanceOf(User::class, $user);

        $this->expectException(\Exception::class);
        $result = $userManager->addUser($data);
    }






    public function testUpdateUser()
    {

    }


    public function testCreateAdminUserIfNotExists()
    {
        $data = [
            'email' => 'ruslan@prophp.eu',
            'full_name' => 'Admin User',
            'password' => '123456'
        ];

        $userManager = $this->serviceManager->get(UserManager::class);
        $user = $userManager->createAdminUserIfNotExists($data);

        $this->assertInstanceOf(User::class, $user);
    }

    public function testGeneratePasswordResetToken()
    {
        $em = $this->getORM();
        $userEnt = $em->getRepository(User::class);
        $userObj = $userEnt->findOneBy(['email' => 'ruslan@prophp.eu'] );


        $userManager = $this->serviceManager->get(UserManager::class);
        $result = $userManager->generatePasswordResetToken($userObj);
    }


    public function testValidateToken()
    {
        $em = $this->getORM();
        $userEnt = $em->getRepository(User::class);
        $userObj = $userEnt->findOneBy(['email' => 'ruslan@prophp.eu'] );

        $userManager = $this->serviceManager->get(UserManager::class);
        if(!empty($userObj)){
            $token = $userObj->getPwdResetToken();
            $result = $userManager->validateToken($token);
        }
    }


    public function testSetNewPasswordByToken()
    {
        $em = $this->getORM();
        $userEnt = $em->getRepository(User::class);
        $userObj = $userEnt->findOneBy(['email' => 'ruslan@prophp.eu'] );

        $userManager = $this->serviceManager->get(UserManager::class);
        if(!empty($userObj)){
            $newPass = '123456';
            $token = $userObj->getPwdResetToken();
            $result = $userManager->setNewPasswordByToken($token, $newPass);
        }
    }


    public function testCheckUserExists()
    {

    }

}